{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","serviceWorker.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookDetail","editBook","deleteBook","BookDetails","onDelete","props","variables","id","bookId","refetchQueries","query","onCancel","setState","isEdit","state","onEdit","onChange","e","target","name","value","onSubmit","preventDefault","genre","displayBookDetails","data","refetch","book","className","type","defaultValue","author","books","map","item","key","style","marginRight","onClick","this","Component","compose","graphql","options","BookList","onSelect","displayBooks","loading","AddBook","displayAuthors","authors","submitForm","authorId","alert","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dbcfc59.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      id\n    }\n  }\n`;\n\nconst getBookDetail = gql`\n  query($id: ID) {\n    book(id: $id) {\n      name\n      genre\n      author {\n        name\n        age\n        books {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst editBook = gql`\n  mutation($id: ID, $name: String!, $genre: String!) {\n    editBook(id: $id, name: $name, genre: $genre) {\n      name\n      genre\n      author {\n        name\n        age\n        books {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst deleteBook = gql`\n  mutation($id: ID) {\n    deleteBook(id: $id) {\n      name\n      genre\n    }\n  }\n`;\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookDetail, editBook, deleteBook };\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { flowRight as compose } from 'lodash';\nimport { getBookDetail, deleteBook, editBook, getBooksQuery } from '../queries';\n\nclass BookDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isEdit: false,\n      name: '',\n      genre: '',\n    };\n  }\n\n  onDelete = () => {\n    this.props.deleteBook({\n      variables: { id: this.props.bookId },\n      refetchQueries: [{ query: getBooksQuery }],\n    });\n  };\n\n  onCancel = () => {\n    this.setState({\n      isEdit: !this.state.isEdit,\n    });\n  };\n\n  onEdit = () => {\n    this.setState({\n      isEdit: !this.state.isEdit,\n    });\n  };\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.editBook({\n      variables: {\n        id: this.props.bookId,\n        name: this.state.name,\n        genre: this.state.genre,\n      },\n      refetchQueries: [{ query: getBooksQuery }],\n    });\n\n    this.setState({\n      isEdit: !this.state.isEdit,\n      name: '',\n      genre: '',\n    });\n  };\n\n  displayBookDetails = () => {\n    this.props.data.refetch();\n    const { book } = this.props.data;\n    const { isEdit } = this.state;\n\n    if (book) {\n      return (\n        <div>\n          {!isEdit ? (\n            <span>\n              <h2>{book.name}</h2>\n              <p>\n                <u>Genre:</u> <i>{book.genre}</i>\n              </p>\n            </span>\n          ) : (\n            <span>\n              <div className=\"field\">\n                <label>Book Name:</label>\n                <input type=\"text\" defaultValue={book.name} name=\"name\" onChange={this.onChange} />\n              </div>\n              <div className=\"field\">\n                <label>Genre:</label>\n                <input\n                  type=\"text\"\n                  defaultValue={book.genre}\n                  name=\"genre\"\n                  onChange={this.onChange}\n                />\n              </div>\n            </span>\n          )}\n          <p>\n            <u>Author:</u> <i>{book.author.name}</i>\n          </p>\n\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {book.author.books.map(item => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n          <button\n            style={{ marginRight: '5px' }}\n            type=\"button\"\n            className=\"btn btn-dark\"\n            onClick={!this.state.isEdit ? this.onEdit : this.onSubmit}\n          >\n            {!this.state.isEdit ? 'Edit' : 'Submit'}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-dark\"\n            onClick={!this.state.isEdit ? this.onDelete : this.onCancel}\n          >\n            {!this.state.isEdit ? 'Delete' : 'Cancel'}\n          </button>\n        </div>\n      );\n    }\n    return <div>No books selected</div>;\n  };\n\n  render() {\n    return (\n      <>\n        <div id=\"book-details\">\n          <p>Output book details here</p>\n          {this.displayBookDetails()}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getBookDetail, {\n    options: props => {\n      return {\n        variables: {\n          id: props.bookId,\n        },\n      };\n    },\n  }),\n  graphql(editBook, { name: 'editBook' }),\n  graphql(deleteBook, { name: 'deleteBook' }),\n  graphql(getBooksQuery, { name: 'getBooksQuery' }),\n)(BookDetails);\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBooksQuery } from '../queries';\nimport BookDetails from './BookDetails';\n\nclass BookList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      bookId: null,\n    };\n  }\n\n  onSelect = e => {\n    e.preventDefault();\n    this.setState({\n      bookId: e.target.id,\n    });\n  };\n\n  displayBooks = () => {\n    const { data } = this.props;\n    if (data.loading) {\n      return <div>Loading book ...</div>;\n    }\n    return data.books.map(book => {\n      return (\n        <li key={book.id} id={book.id} onClick={this.onSelect}>\n          {book.name}\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <ul id=\"book-list\">{this.displayBooks()}</ul>\n        <BookDetails bookId={this.state.bookId} />\n      </>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { flowRight as compose } from 'lodash';\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from '../queries';\n\nclass AddBook extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      genre: '',\n      authorId: '',\n    };\n  }\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  displayAuthors = () => {\n    const data = this.props.getAuthorsQuery;\n    if (data.loading) {\n      return <option>Loading data ...</option>;\n    }\n    return data.authors.map(author => {\n      return (\n        <option key={author.id} value={author.id}>\n          {author.name}\n        </option>\n      );\n    });\n  };\n\n  submitForm = e => {\n    e.preventDefault();\n    const { name, genre, authorId } = this.state;\n    if (!authorId) {\n      alert('You must choose an author');\n    } else {\n      this.props.addBookMutation({\n        variables: {\n          name,\n          genre,\n          authorId,\n        },\n        refetchQueries: [{ query: getBooksQuery }],\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <form id=\"add-book\" onSubmit={this.submitForm}>\n          <div className=\"field\">\n            <label>Book name:</label>\n            <input type=\"text\" name=\"name\" onChange={this.onChange} />\n          </div>\n          <div className=\"field\">\n            <label>Genre:</label>\n            <input type=\"text\" name=\"genre\" onChange={this.onChange} />\n          </div>\n          <div className=\"field\">\n            <label>Author:</label>\n            <select name=\"authorId\" onChange={this.onChange}>\n              <option>Select author</option>\n              {this.displayAuthors()}\n            </select>\n          </div>\n          <button>+</button>\n        </form>\n      </>\n    );\n  }\n}\nexport default compose(\n  graphql(getAuthorsQuery, { name: 'getAuthorsQuery' }),\n  graphql(addBookMutation, { name: 'addBookMutation' }),\n)(AddBook);\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// components\nimport { BookList, AddBook } from './components';\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h1>Hao's Reading List</h1>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}